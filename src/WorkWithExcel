//для записи в excel новых карт метод writeIntoExcel
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Date;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.RichTextString;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

public class WorkWithExcel {
	@SuppressWarnings("deprecation")
	public static void writeIntoExcel(String number, String type, double limit,
			int counter) throws FileNotFoundException, IOException {

		FileInputStream file1 = new FileInputStream(new File("N:/Книга1.xls"));
		Workbook book = new HSSFWorkbook(file1);

		book.removeSheetAt(0);
		Sheet sheet = book.createSheet();		

		FileInputStream fis = new FileInputStream("N:/Книга1.xls");
		Workbook wb = new HSSFWorkbook(fis);
		
		Cell existingCell;
		Row row;
		
		int i = 0, j = 0;
		for (i = 0; i < counter; i++) {
			row = sheet.createRow(i);
			for (j = 0; j < 3; j++) {
				existingCell = row.createCell(j);		
				existingCell.setCellValue(getCellText(wb.getSheetAt(0).getRow(i).getCell(j)));
				
				System.out.println("AWR "+j+" "+existingCell);
				System.out.println("R "+book.getSheetAt(0).getRow(i).getCell(j));
			}										
		}					
		
		Row newRow = sheet.createRow(counter);
		Cell newCell = newRow.createCell(0);
		Cell newCell1 = newRow.createCell(1);
		Cell newCell2 = newRow.createCell(2);

		newCell.setCellValue(number);
		newCell1.setCellValue(type);
		newCell2.setCellValue(limit);			
		
		FileOutputStream out = new FileOutputStream("N:/Книга1.xls");
		book.write(out);
		out.close();
		fis.close();
		file1.close();
	}

	public static void readFromExcel(int counter) throws IOException {
		FileInputStream fis = new FileInputStream("N:/Книга1.xls");
		HSSFWorkbook wb = new HSSFWorkbook(fis);
		for(int i = 0; i < counter; i++){
		System.out.println(wb.getSheetAt(0).getRow(i).getCell(0));
		System.out.println(wb.getSheetAt(0).getRow(i).getCell(1));
		System.out.println(wb.getSheetAt(0).getRow(i).getCell(2));
		}
		fis.close();	
	}
	
	public static String getCellText(Cell cell) {
		String result="";
		if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING)
		{
			result=cell.getStringCellValue();
		}
		else if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)
		{
			result = Integer.toString((int) cell.getNumericCellValue());
		}
		return result;
	}
	
	public static int findRowUser(String numCard) throws IOException {
		FileInputStream fis = new FileInputStream("N:/Книга1.xls");
		Workbook wb = new HSSFWorkbook(fis);
		int row = 0;
		for (int i = 0;; i++) {
			if (numCard.equals(getCellText(wb.getSheetAt(0).getRow(i).getCell(0)))) {
				row = i;
				break;
			}
		}
		fis.close();
		return row;
	}
	
	public static String getSum(int rowNumber) throws IOException{
		String res="";
		FileInputStream fis;
		try {
			fis = new FileInputStream("N:/Книга1.xls");
			Workbook wb = new HSSFWorkbook(fis);		
			res=getCellText(wb.getSheetAt(0).getRow(rowNumber).getCell(2));
			fis.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return res;		
	}
}
